// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabela para armazenar as informações de cada campanha de rifa
model Rifa {
  id            Int      @id @default(autoincrement())
  titulo        String
  descricao     String? // O '?' indica que o campo é opcional
  imagemUrl     String?
  premio        String
  valorCota     Float
  totalNumeros  Int
  dataSorteio   DateTime?
  status        String   @default("ativa") // Ex: 'ativa', 'finalizada', 'cancelada'
  createdAt     DateTime @default(now())
  tickets       Ticket[] // Relação: Uma rifa pode ter muitos tickets
}

// Tabela para os compradores dos tickets
model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique // Email deve ser único
  telefone  String
  createdAt DateTime @default(now())
  tickets   Ticket[] // Relação: Um usuário pode ter muitos tickets
}

// Tabela para os números da rifa comprados por um usuário
model Ticket {
  id                Int      @id @default(autoincrement())
  numero            Int
  status            String   @default("disponivel") // Ex: 'disponivel', 'reservado', 'pago'
  checkoutSessionId String?  // Para rastrear a compra no gateway
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Chaves estrangeiras para as relações
  rifa      Rifa     @relation(fields: [rifaId], references: [id])
  rifaId    Int
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId Int?

  // Garante que não haja números duplicados na mesma rifa
  @@unique([rifaId, numero])
}